<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>CS | 赵思源</title>
    <link>https://clarkzhao.github.io/zh/category/cs/</link>
      <atom:link href="https://clarkzhao.github.io/zh/category/cs/index.xml" rel="self" type="application/rss+xml" />
    <description>CS</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>zh</language><lastBuildDate>Sun, 11 Nov 2018 00:13:00 +0800</lastBuildDate>
    <image>
      <url>https://clarkzhao.github.io/images/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_2.png</url>
      <title>CS</title>
      <link>https://clarkzhao.github.io/zh/category/cs/</link>
    </image>
    
    <item>
      <title>读《编写可读代码的艺术》</title>
      <link>https://clarkzhao.github.io/zh/post/notes-the-art-of-readable-code/</link>
      <pubDate>Sun, 11 Nov 2018 00:13:00 +0800</pubDate>
      <guid>https://clarkzhao.github.io/zh/post/notes-the-art-of-readable-code/</guid>
      <description>&lt;p&gt;工作后，陆陆续续也做了几个项目，本书中所提到的几个注意点确实深有体会。这本能够围绕提高代码可读性这个原则，介绍了从变量名、注释、控制流、表达式、类/方法等多个方面优化代码的方法。这个读书笔记总结了作者的主要想法，起到了快速查阅的作用。&lt;/p&gt;
&lt;p&gt;既然本书是关于提高代码可读性的，那么提高代码可读性到底重不重要呢？&lt;/p&gt;
&lt;p&gt;我认为答案并非绝对的。对于书中提到的那些一劳永逸即可提升的点，最好仔细理解并贯彻，比如变量的命名方式，函数的结构等等，这些其实是节省自己以及别人未来的时间。&lt;/p&gt;
&lt;p&gt;对于另一些每次运用都需要花费额外时间的点，比如额外的注释等等，建议哪怕项目再赶，宏观级注释也是需要的，因为它不需要花费过多额外的时间，却至少这可以帮助到未来的自己理解代码。&lt;/p&gt;
&lt;p&gt;剩下的就见仁见智了，也许未来的我们都会有新的理解。&lt;/p&gt;
&lt;p&gt;附：豆瓣地址: 
&lt;a href=&#34;https://book.douban.com/subject/10797189/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;中文版&lt;/a&gt;，
&lt;a href=&#34;https://book.douban.com/subject/5442971/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;英文版&lt;/a&gt;&lt;/p&gt;
 &lt;h2&gt;目录&lt;/h2&gt;
&lt;nav id=&#34;TableOfContents&#34;&gt;
  &lt;ul&gt;
    &lt;li&gt;&lt;a href=&#34;#前言代码应当易于理解&#34;&gt;前言、代码应当易于理解&lt;/a&gt;&lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#一表面层次的改进&#34;&gt;一、表面层次的改进&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#把信息装到变量的名字中&#34;&gt;把信息装到变量的名字中&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#不会误解的名字&#34;&gt;不会误解的名字&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#审美&#34;&gt;审美&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#改写什么样的注释&#34;&gt;改写什么样的注释&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#写出言简意赅的注释&#34;&gt;写出言简意赅的注释&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#二简化循环和逻辑&#34;&gt;二、简化循环和逻辑&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#让控制流变得易读&#34;&gt;让控制流变得易读&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#拆分超长的表达式&#34;&gt;拆分超长的表达式&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#变量与可读性&#34;&gt;变量与可读性&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#三重新组织代码&#34;&gt;三、重新组织代码&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#抽取不相干的子问题&#34;&gt;抽取不相干的子问题&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#一次只做一件事&#34;&gt;一次只做一件事&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#把想法变成代码&#34;&gt;把想法变成代码&lt;/a&gt;&lt;/li&gt;
        &lt;li&gt;&lt;a href=&#34;#少写代码&#34;&gt;少写代码&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
    &lt;li&gt;&lt;a href=&#34;#四精选话题&#34;&gt;四、精选话题&lt;/a&gt;
      &lt;ul&gt;
        &lt;li&gt;&lt;a href=&#34;#测试与可读性&#34;&gt;测试与可读性&lt;/a&gt;&lt;/li&gt;
      &lt;/ul&gt;
    &lt;/li&gt;
  &lt;/ul&gt;
&lt;/nav&gt;
&lt;h1 id=&#34;前言代码应当易于理解&#34;&gt;前言、代码应当易于理解&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;可读性基本定理&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;代码的写法应当使别人理解它所需的时间最小化。&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;一表面层次的改进&#34;&gt;一、表面层次的改进&lt;/h1&gt;
&lt;h2 id=&#34;把信息装到变量的名字中&#34;&gt;把信息装到变量的名字中&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;选择专业的词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如将下表左列指代不清的词换成右列中更为细分的词&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;单词&lt;/th&gt;
&lt;th&gt;其他选择&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;get&lt;/td&gt;
&lt;td&gt;fetch, download&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;stop&lt;/td&gt;
&lt;td&gt;kill, pause, resume&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;send&lt;/td&gt;
&lt;td&gt;deliver, dispatch, distribute&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;find&lt;/td&gt;
&lt;td&gt;search, locate, extract&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;start&lt;/td&gt;
&lt;td&gt;launch, create, begin, open&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;make&lt;/td&gt;
&lt;td&gt;create, build, add, compose, new&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;避免泛泛的词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免 &lt;code&gt;tmp&lt;/code&gt; 这种泛泛的词&lt;/li&gt;
&lt;li&gt;好的名字应当描述变量的目的或者它所承载的值
&lt;ul&gt;
&lt;li&gt;如用&lt;code&gt;sum_squares&lt;/code&gt; 代替 &lt;code&gt;tmp&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;tmp&lt;/code&gt;如果是文件，则用 &lt;code&gt;tmp_file&lt;/code&gt; 更好&lt;/li&gt;
&lt;li&gt;循环迭代器 &lt;code&gt;i, j, k&lt;/code&gt; 如果循环太多，容易搞混，最好用它所循环的变量名作为前缀如&lt;code&gt;club_i, member_i, user_i&lt;/code&gt; 或者 &lt;code&gt;ci, mi, ui&lt;/code&gt; 代替&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用具体的名字代替抽象的名字&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;哪些名字非常抽象呢，想象自己是一个新加入项目的成员，能否快速通过名字知道这个变量所表达的信息&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为名字附带更多的信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;后缀加单位&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如 &lt;code&gt;start -&amp;gt; start_ms&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;附带其他信息&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;未处理的变量前加 &lt;code&gt;raw_&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如纯文本的密码变量 &lt;code&gt;pwd -&amp;gt; plaintext_pwd&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;匈牙利表示法是严谨的此类方法的命名系统&lt;/p&gt;
&lt;p&gt;它把变量的类型信息放在了变量名最前面如&lt;/p&gt;
&lt;p&gt;&lt;code&gt;pLast&lt;/code&gt;表示数据结构中最后一个元素的指针&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;名字要不要太长&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;怎么选择变量名的长短，如&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;d, days, days_since_last_update&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小的作用域里写短名字&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;代码补全可以让输入长名字不再痛苦&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只是用通用的缩略词，避免首字母缩略&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如 &lt;code&gt;str -&amp;gt; string&lt;/code&gt; 是很通用的写法&lt;/li&gt;
&lt;li&gt;&lt;code&gt;LF -&amp;gt; Load Factor&lt;/code&gt; 就容易让人费解&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拿掉不会损失信息的词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;ConverToString - &amp;gt; ToString&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;利用名字的格式来传递含义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;类变量后面加后缀&lt;code&gt;offset_&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;全部大写表示常量 &lt;code&gt;MAX_FILE_CNT&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;不会误解的名字&#34;&gt;不会误解的名字&lt;/h2&gt;
&lt;p&gt;多问自己几遍：“这个名字会被解读成其他的含义吗？”&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如 &lt;code&gt;filter&lt;/code&gt; 究竟是过滤剩下的还是直接减去的意思？&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;max_length&lt;/code&gt; 如果代表最大字符数，用&lt;code&gt;max_chars&lt;/code&gt; 更好，因为&lt;code&gt;length&lt;/code&gt; 指代不清晰&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;min&lt;/code&gt; 和 &lt;code&gt;max&lt;/code&gt; 代表极限值，这样就可以明确是 &lt;code&gt;&amp;gt;&lt;/code&gt; 和 &lt;code&gt;&amp;lt;&lt;/code&gt; 而不是&lt;code&gt;&amp;gt;=&lt;/code&gt;和&lt;code&gt;&amp;lt;=&lt;/code&gt; 了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;first&lt;/code&gt; 和 &lt;code&gt;last&lt;/code&gt; 来代表包含的范围&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用 &lt;code&gt;begin&lt;/code&gt; 和 &lt;code&gt;end&lt;/code&gt; 来代表排除的范围&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;end&lt;/code&gt;代表刚好超过最后一个值&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;布尔值命名前加上&lt;code&gt;is, has, can, should&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免使用反义词&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;与使用者的期望匹配&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;get()&lt;/code&gt; 和 &lt;code&gt;size()&lt;/code&gt; 给人很容易得到的感觉，如果是要计算均值用&lt;code&gt;compute_mean（）&lt;/code&gt; 比 &lt;code&gt;get_mean()&lt;/code&gt;好&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;审美&#34;&gt;审美&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;审美三原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用一致的布局&lt;/li&gt;
&lt;li&gt;相似的代码看上去相似&lt;/li&gt;
&lt;li&gt;把相关的代码行分组，形成代码块
&lt;ul&gt;
&lt;li&gt;把相似的想法归类&lt;/li&gt;
&lt;li&gt;提供“脚印”&lt;/li&gt;
&lt;li&gt;便于段落间的导航&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;变量申明调用时，使用有意义的顺序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果在一段代码提到A、 B 和 C， 那么不要在另 一段中说 B、 C 和 A。 选择一个有意义的顺序， 并始终用这样的顺序。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把申明按逻辑组织起来&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用空行和注释把不同阶段的代码分开来&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;个人风格的一致性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;缩进&lt;/li&gt;
&lt;li&gt;换行处&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;改写什么样的注释&#34;&gt;改写什么样的注释&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;注释的目的是为了帮助读者了解的和作者一样多&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;当我们写代码时，脑海里有很多有价值的信息，但是读者除了注释能看到的只有代码，所以注释包含的信息非常重要&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;哪些不需要注释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;没有提供新的信息&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不能帮助读者更好的理代码&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;不要为那些从代码本身就能快速推断的事实写注释&lt;/strong&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;# Bad comment 
# ===========
# y equals x plus 1
y = x + 1
      
# Good comment
# ============
# remove everything after the second *
name = &#39;*&#39;.join(line.split(&#39;*&#39;)[:2])
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免为了注释而注释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;比如重写一遍函数的输入变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;不要给不好的名字加注释，把名字改好&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好代码 &amp;gt; 坏代码 + 好注释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用代码记录你的思想&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;好的注释就是写代码中产生的重要想法&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;电影制作者在其中给出自己的见解来通过讲故事来帮助你理解这部电影如何制作的。代码的注释也应该起到类似的效果&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为代码的瑕疵写注释&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;标记&lt;/th&gt;
&lt;th&gt;通常的意义&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;TODO&lt;/td&gt;
&lt;td&gt;我还没有处理的事&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;FIXME&lt;/td&gt;
&lt;td&gt;已知的无法运行的代码&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;HACK&lt;/td&gt;
&lt;td&gt;对一个问题不得不采用的比较粗糙的解决方案&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;XXX&lt;/td&gt;
&lt;td&gt;危险！这里有很重要的事&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;代码如何改动的想法应该被记录下来。此类注释帮助读者认识代码当前的质量和状态，甚至可以指导未来代码的改进方向&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;给常量加注释&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;记录下决定这个常量值时的想法&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;站在读者的角度，去想象他们需要知道什么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;想象你的代码对于外人看起来是什么样子的，这个人并不熟悉你的项目&lt;/li&gt;
&lt;li&gt;将细节写在注释中，解释为什么代码这么写而不那么写的内在理由&lt;/li&gt;
&lt;li&gt;为普通读者意料之外的行为加上注释&lt;/li&gt;
&lt;li&gt;公布有可能存在的陷阱，未雨绸缪
&lt;ul&gt;
&lt;li&gt;与其让用户慢慢发现问题，不如提前告知风险&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;全局关的注释
&lt;ul&gt;
&lt;li&gt;解释系统的各个组成部分&lt;/li&gt;
&lt;li&gt;文件级别的注释&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;总结性的注释
&lt;ul&gt;
&lt;li&gt;解释后面的代码块做什么&lt;/li&gt;
&lt;li&gt;不能简单的说注释只能用于解释“为什么”的问题而不能用于说明“是什么”的问题， 具体问题具体分析。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;只要能帮到用户理解代码的，就是好注释。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;克服不敢写注释的方法&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不管心里想什么，先写下来&lt;/li&gt;
&lt;li&gt;读一下这段注释，改进&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;写出言简意赅的注释&#34;&gt;写出言简意赅的注释&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;注释应该有很高的信息/空间率&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;让注释保持紧凑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免使用不明确的代词&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;it, this&lt;/code&gt;到底指什么&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;润色粗糙的注释&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;精确&lt;/strong&gt;的描述函数的行为&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如统计行数的行数，定义清楚行数到底怎么统计的，是数 &lt;code&gt;\n&lt;/code&gt; 呢还是数 &lt;code&gt;\r&lt;/code&gt; 呢？&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用输入输出的例子来说明特别情况&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有些时候一个好的例子顶的上很多句话&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要包含新的新信息，而非解释代码字面上的意思。从高层次解释这段程序做了什么&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这样做的好处在于可以让读者明白作者真正的意图，可能与实际代码有冲突，起到了冗余检查的角色&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让函数的参数有名字&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;Connect(timeout=10, use_encryption=False)
&lt;/code&gt;&lt;/pre&gt;
&lt;pre&gt;&lt;code class=&#34;language-C++&#34;&gt;Connect(/* timeout_ms = */10, /* use_encryption */ = False)
&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;采用信息量很高的词，代替经常出现的编程场景&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Caching layer&lt;/li&gt;
&lt;li&gt;heurisitc&lt;/li&gt;
&lt;li&gt;bruteforce&lt;/li&gt;
&lt;li&gt;naive solution&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;二简化循环和逻辑&#34;&gt;二、简化循环和逻辑&lt;/h1&gt;
&lt;h2 id=&#34;让控制流变得易读&#34;&gt;让控制流变得易读&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;避免复杂的逻辑，巨大的表达式，一大堆变量，因为这增加了我们的思维包袱，这与容易理解矛盾，容易引起 bug 。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;条件语句中参数的顺序&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;比较的左侧&lt;/th&gt;
&lt;th&gt;比较的右侧&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;被查询的表达式，偏变量&lt;/td&gt;
&lt;td&gt;被比较的表达式，偏常量&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这条原则和英文（中文）的语法一致&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;if/else&lt;/code&gt; 的顺序&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先处理正逻辑&lt;/li&gt;
&lt;li&gt;先处理简单情况&lt;/li&gt;
&lt;li&gt;先处理有趣、可疑的情况&lt;/li&gt;
&lt;li&gt;前三者有冲突时，视情况决定&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;条件表达式&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;相对于追求最小化的代码行数，一个更好的度量方法是最小化人们理解的时间&lt;/li&gt;
&lt;li&gt;默认使用 &lt;code&gt;if/else&lt;/code&gt; 只在最简单的情况下，使用简化的语法糖&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免&lt;code&gt;do/while&lt;/code&gt; 语句，尽量让条件判断出现在最前面&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;从函数中提前返回没有问题，只要保证调用函数结尾的清理代码就行&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;慎用&lt;code&gt;goto&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;最小化嵌套&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;当对代码进行改动时，从全新的角度审视它，把它作为一个整体来看。&lt;/li&gt;
&lt;li&gt;通过提早返回来减少嵌套
&lt;ul&gt;
&lt;li&gt;每一个&lt;code&gt;if&lt;/code&gt; 都以&lt;code&gt;return&lt;/code&gt; 或 &lt;code&gt;continue&lt;/code&gt; 结束&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;谨慎的对待语言的高级特性，确保我们清楚代码的执行流程&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;拆分超长的表达式&#34;&gt;拆分超长的表达式&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;代码中的表达式越长，越难以理解，尝试把它拆成若干的小块&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;总结变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;讲一个表达式用总结变量存下来，后面再复用这个总结变量&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用德摩根定理 
&lt;a href=&#34;https://en.wikipedia.org/wiki/De_Morgan%27s_laws&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;De Morgan&amp;rsquo;s laws&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;非 (P 且 q) = (非 p) 或 (非 q)&lt;/li&gt;
&lt;li&gt;非 (p 或 q) = (非 p) 且 (非 q)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免滥用短路逻辑&lt;/p&gt;
&lt;p&gt;尽管有些语言存在特性&lt;code&gt;if(a||b) &lt;/code&gt; 在 &lt;code&gt;a&lt;/code&gt; 为真是不会执行 &lt;code&gt;b&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;还是老老实实用 &lt;code&gt;if/else&lt;/code&gt;比较好&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;小心智能的小代码段，它们除了炫技毫无意义，只会去让人困惑，不利于后期维护&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;拆分复杂逻辑的一个方向是尝试它的逆逻辑&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;多个一样的表达式可以提取出来成为变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;避免录入错误&lt;/li&gt;
&lt;li&gt;减少行宽，更易阅读&lt;/li&gt;
&lt;li&gt;方便改动，不必多次修改同类代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用宏简化重复的同类表达&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;变量与可读性&#34;&gt;变量与可读性&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;跟踪变量的三个问题&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;变量越多，就越难全部跟踪它们的动向&lt;/li&gt;
&lt;li&gt;变量作用域越大，就需要跟踪它们的动向越久&lt;/li&gt;
&lt;li&gt;变量改动的越平凡，就越难确定它们的当前值&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;减少变量&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;减少没有价值的临时变量
&lt;ul&gt;
&lt;li&gt;没有拆分复杂的表达式&lt;/li&gt;
&lt;li&gt;没有做出更多的澄清&lt;/li&gt;
&lt;li&gt;只用了一次，没有压缩任何冗余&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;减少用来保存中间结果的变量&lt;/li&gt;
&lt;li&gt;减少控制流变量
&lt;ul&gt;
&lt;li&gt;这类变量唯一的目的就是控制程序的执行&lt;/li&gt;
&lt;li&gt;这类变量可以用更好地结构化编程来消除&lt;/li&gt;
&lt;li&gt;有多层循环时，可以把循环中的代码或者整个循环挪到一个新函数中&lt;/li&gt;
&lt;li&gt;微软的 Eric Brechner 说过：“一个好的面试题起码要涉及三个变量。” 因为同时处理三个变量可以强迫人努力思考，但是我们的代码并不是用来面试我们的同事的。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;缩小变量的作用域&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;让你的变量对尽量少的代码行可见&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;如果有一个类变量只有两个方法调用了，那么就可以把这个类变量降格成局部变量，因为它不需要被其他方法看见&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把定义下移&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;原来C语言要求有所变量在代码最前面声明&lt;/li&gt;
&lt;li&gt;现在可以在它使用前才声明&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;只写一次的变量更好&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;三重新组织代码&#34;&gt;三、重新组织代码&lt;/h1&gt;
&lt;p&gt;三种组织函数级别代码的改动&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;抽取出那些与程序主要目的不相关的子问题，变成新的函数&lt;/li&gt;
&lt;li&gt;重新组织代码，使它们一次只做一件事&lt;/li&gt;
&lt;li&gt;先用自然语言描述代码，再用这个描述帮助找到更整洁的解决方案&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;抽取不相干的子问题&#34;&gt;抽取不相干的子问题&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;纯工具代码可以自己写或者调库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;文件 I/O&lt;/li&gt;
&lt;li&gt;操作字符串&lt;/li&gt;
&lt;li&gt;哈希表&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建大量通用的代码&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;从项目其他部分中解耦出来&lt;/li&gt;
&lt;li&gt;容易开发&amp;amp;测试&lt;/li&gt;
&lt;li&gt;项目的其他部分会更小且更容易思考&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;简化已有的接口&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;永远不要安于使用不理想的接口&lt;/li&gt;
&lt;li&gt;创建自己的包装函数来隐藏粗陋的接口&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;必要时，按需要重塑接口&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免过犹不及，不要引入过多的小函数&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;一次只做一件事&#34;&gt;一次只做一件事&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;应该把代码组织的一次只做一件事&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;http://p9283q7hh.bkt.clouddn.com/do_one_thing_at_a_time.png&#34; alt=&#34;do_one_thing_at_a_time&#34;&gt;&lt;/p&gt;
&lt;p&gt;这个原则不仅适用于一个小函数，而且适用于将大的业务函数整理有序&lt;/p&gt;
&lt;p&gt;流程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;列出代码所需做的所有任务&lt;/li&gt;
&lt;li&gt;尽量把这件任务拆分到不同的函数中，或者至少是代码的不同段落中&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;从对象中抽取需要的值
&lt;ul&gt;
&lt;li&gt;比如对象是一个字典，我们需要这个字典的若干的键对应的值，可以将这写值保存在变量中，抽取出来。这样就不必记住复杂的健值了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Tips&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;`a||b||c` 可以返回第一个真值
&lt;/code&gt;&lt;/pre&gt;
&lt;h2 id=&#34;把想法变成代码&#34;&gt;把想法变成代码&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你不能把一件事解释给你的祖母听的话说明你还没有真正理解它。 
​							                             阿尔伯特 爱因斯坦&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;编写清晰代码的方法&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;像对着一个同事一样用自然语言描述代码要做什么&lt;/li&gt;
&lt;li&gt;注意描述中的关键词&lt;/li&gt;
&lt;li&gt;写出与所描述匹配的代码&lt;/li&gt;
&lt;/ol&gt;
&lt;ul&gt;
&lt;li&gt;清楚的描述逻辑&lt;/li&gt;
&lt;li&gt;了解已有的函数库&lt;/li&gt;
&lt;li&gt;运用递归&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;少写代码&#34;&gt;少写代码&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;最好的代码就是没有代码&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;写代码的最高境界就是不写代码。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;这句话虽有调侃之意，却隐含着哲学思辨，时刻问自己，我们真的需要写这些代码吗？&lt;/p&gt;
&lt;p&gt;不要低估写代码的时间，因为实现或许不费功夫，但是将来的代码库的维护，都会增加时间&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;质疑和拆分你的需求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有时候，解决一半问题可能只需要花费四分之一的时间&lt;/li&gt;
&lt;li&gt;消除不必要的功能&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;保持小代码库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创建越来越多的“工具”代码来减少重复代码（第十章）&lt;/li&gt;
&lt;li&gt;减少无用代码或者没有用的功能&lt;/li&gt;
&lt;li&gt;让项目分开保持子项目状态&lt;/li&gt;
&lt;li&gt;总的来说，小心代码的重量。保持轻灵&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;类似植物剪枝，代码也应该勤快的修剪&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;创造性的工作都不会保留之前所有的工作，比如电影、音乐、作者&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;熟悉周边的库&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;其实现有的库可以解决大部分问题，不要重复造轮子，我们的时间更重要。&lt;/li&gt;
&lt;li&gt;使用 UNIX 命令行代替代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;避免过度设计&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;用最简单的方法完成工作&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;四精选话题&#34;&gt;四、精选话题&lt;/h1&gt;
&lt;h2 id=&#34;测试与可读性&#34;&gt;测试与可读性&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;测试应当具有可读性，以方便其他人可以舒服的更改或增加测试。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;普遍的测试原则&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;应当对使用者隐去不重要的细节，以便其他更重要的细节突出&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;创建最小的测试声明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大多数测试的基本内容都能精练成 “对于这样的输入或情形， 期望有 这样的行为或输出”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;让错误消息具备可读性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;更好版本的 &lt;code&gt;assert()&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;更好的测试输入&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;应当选择一组最简单的输入，前提是它能完整的使用被测代码&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;简化输入值
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;又简单又能完成工作的测试值更好&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;一个功能，多个测试&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个测试测试一个方向的bug，避免在一个测试函数内尝试所有情况&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为测试函数命名&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Test_&amp;lt;FunctionName&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;code&gt;Test_&amp;lt;FunctionName&amp;gt;_&amp;lt;situation&amp;gt;&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试函数的名字就是注释&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;测试驱动的开发 Test-Drive Development&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;解耦的最好的类往往是最容易测试的&lt;/li&gt;
&lt;li&gt;避免程序内部类和类之间方法的调用&lt;/li&gt;
&lt;li&gt;在写代码时想着测试就能有帮助，会促使我们停下来思考是否存在更好的设计&lt;/li&gt;
&lt;li&gt;坏代码&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;http://p9283q7hh.bkt.clouddn.com/bad_deisgn_for_test.png&#34; alt=&#34;bad_deisgn_for_test&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好代码&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;特征&lt;/th&gt;
&lt;th&gt;对测试的好处&lt;/th&gt;
&lt;th&gt;对设计的好处&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;类只有很少的内部状态&lt;/td&gt;
&lt;td&gt;很容易写出测试&lt;/td&gt;
&lt;td&gt;更易理解&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;类/函数只做一件事&lt;/td&gt;
&lt;td&gt;需要较少的测试用例&lt;/td&gt;
&lt;td&gt;较小/简单的组件更加模块化，系统能有较低耦合&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;每个类对别的类依赖小，低耦合&lt;/td&gt;
&lt;td&gt;每个类可以独立测试&lt;/td&gt;
&lt;td&gt;系统可以并行开发，可以很容易的修改或者删除类，不会影响其他组件&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;函数接口简单，定义明确&lt;/td&gt;
&lt;td&gt;有明确的行为可以测试，测试接口工作量小&lt;/td&gt;
&lt;td&gt;接口更容易让程序员学习，复用概率高&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;避免走的太远（Don&amp;rsquo;t be too over）&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;牺牲真实代码的可读性&lt;/li&gt;
&lt;li&gt;沉迷100%的测试覆盖率&lt;/li&gt;
&lt;li&gt;考虑投入产出比，有些bug不值得测试&lt;/li&gt;
&lt;li&gt;别让测试成为产品开发的阻碍&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;</description>
    </item>
    
  </channel>
</rss>
